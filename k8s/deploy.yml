apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nodeapp
    type: backend
  managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        'f:metadata':
          'f:annotations': {}
          'f:labels':
            .: {}
            'f:app': {}
            'f:type': {}
        'f:spec':
          'f:progressDeadlineSeconds': {}
          'f:replicas': {}
          'f:revisionHistoryLimit': {}
          'f:selector': {}
          'f:strategy':
            'f:rollingUpdate':
              .: {}
              'f:maxSurge': {}
              'f:maxUnavailable': {}
            'f:type': {}
          'f:template':
            'f:metadata':
              'f:labels':
                .: {}
                'f:app': {}
                'f:type': {}
              'f:name': {}
            'f:spec':
              'f:containers':
                'k:{"name":"nodeappcontainer"}':
                  .: {}
                  'f:imagePullPolicy': {}
                  'f:name': {}
                  'f:ports':
                    .: {}
                    'k:{"containerPort":80,"protocol":"TCP"}':
                      .: {}
                      'f:containerPort': {}
                      'f:protocol': {}
                  'f:resources': {}
                  'f:terminationMessagePath': {}
                  'f:terminationMessagePolicy': {}
              'f:dnsPolicy': {}
              'f:restartPolicy': {}
              'f:schedulerName': {}
              'f:securityContext': {}
              'f:terminationGracePeriodSeconds': {}
      manager: HashiCorp
      operation: Update
      time: '2024-07-07T22:03:08Z'
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        'f:metadata':
          'f:annotations':
            'f:kubectl.kubernetes.io/last-applied-configuration': {}
        'f:spec':
          'f:template':
            'f:spec':
              'f:containers':
                'k:{"name":"nodeappcontainer"}':
                  'f:image': {}
      manager: kubectl-client-side-apply
      operation: Update
      time: '2024-07-07T22:50:49Z'
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        'f:spec':
          'f:template':
            'f:metadata':
              'f:annotations':
                .: {}
                'f:kubectl.kubernetes.io/restartedAt': {}
      manager: kubectl-rollout
      operation: Update
      time: '2024-07-07T22:50:51Z'
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        'f:metadata':
          'f:annotations':
            'f:deployment.kubernetes.io/revision': {}
        'f:status':
          'f:availableReplicas': {}
          'f:conditions':
            .: {}
            'k:{"type":"Available"}':
              .: {}
              'f:lastTransitionTime': {}
              'f:lastUpdateTime': {}
              'f:message': {}
              'f:reason': {}
              'f:status': {}
              'f:type': {}
            'k:{"type":"Progressing"}':
              .: {}
              'f:lastTransitionTime': {}
              'f:lastUpdateTime': {}
              'f:message': {}
              'f:reason': {}
              'f:status': {}
              'f:type': {}
          'f:observedGeneration': {}
          'f:readyReplicas': {}
          'f:replicas': {}
          'f:updatedReplicas': {}
      manager: kube-controller-manager
      operation: Update
      subresource: status
      time: '2024-07-07T22:51:02Z'
  name: nodeappdeployment
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nodeapp
      type: backend
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/restartedAt: '2024-07-07T18:50:51-04:00'
      labels:
        app: nodeapp
        type: backend
      name: nodeapppod
    spec:
      containers:
        - image: us.gcr.io/terraform-on-gcp-428202/github.com/crossur/solo-project
          imagePullPolicy: Always
          name: nodeappcontainer
          ports:
            - containerPort: 80
              protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    cloud.google.com/neg: '{"ingress":true}'
  finalizers:
    - service.kubernetes.io/load-balancer-cleanup
  managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        'f:metadata':
          'f:annotations':
            .: {}
            'f:kubectl.kubernetes.io/last-applied-configuration': {}
        'f:spec':
          'f:allocateLoadBalancerNodePorts': {}
          'f:externalTrafficPolicy': {}
          'f:internalTrafficPolicy': {}
          'f:ports':
            .: {}
            'k:{"port":3000,"protocol":"TCP"}':
              .: {}
              'f:port': {}
              'f:protocol': {}
              'f:targetPort': {}
          'f:selector': {}
          'f:sessionAffinity': {}
          'f:type': {}
      manager: HashiCorp
      operation: Update
      time: '2024-07-06T20:16:51Z'
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        'f:metadata':
          'f:finalizers':
            .: {}
            'v:"service.kubernetes.io/load-balancer-cleanup"': {}
        'f:status':
          'f:loadBalancer':
            'f:ingress': {}
      manager: cloud-controller-manager
      operation: Update
      subresource: status
      time: '2024-07-06T20:18:40Z'
  name: nodeapp-load-balancer-service
  namespace: default
spec:
  allocateLoadBalancerNodePorts: true
  clusterIP: 34.118.237.61
  clusterIPs:
    - 34.118.237.61
  externalTrafficPolicy: Cluster
  internalTrafficPolicy: Cluster
  ipFamilies:
    - IPv4
  ipFamilyPolicy: SingleStack
  ports:
    - nodePort: 31929
      port: 3000
      protocol: TCP
      targetPort: 3000
  selector:
    app: nodeapp
    type: backend
  sessionAffinity: None
  type: LoadBalancer
